{
  "_from": "express-handlebars-sections",
  "_id": "express-handlebars-sections@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-L/S6GvgvPq11VwruwrHMxlDyPCE=",
  "_location": "/express-handlebars-sections",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-handlebars-sections",
    "fetchSpec": "latest",
    "name": "express-handlebars-sections",
    "raw": "express-handlebars-sections",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-handlebars-sections/-/express-handlebars-sections-1.0.1.tgz",
  "_shasum": "2ff4ba1af82f3ead75570aeec2b1ccc650f23c21",
  "_shrinkwrap": null,
  "_spec": "express-handlebars-sections",
  "_where": "C:\\Users\\Banh Bao\\Desktop\\hander\\demo",
  "author": {
    "name": "cyberxander90"
  },
  "bugs": {
    "url": "https://github.com/cyberxander90/express-handlebars-sections/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Include Handlebar Helper to manage sections in layouts.",
  "devDependencies": {},
  "homepage": "https://github.com/cyberxander90/express-handlebars-sections",
  "keywords": [
    "express",
    "express-handlebars",
    "handlebar",
    "layouts",
    "sections"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "express-handlebars-sections",
  "optionalDependencies": {},
  "readme": "# express-handlebars-sections\n\nThis module add support to express-handlebars to manage sections. It means that you can define one or more sections in the template, and then in the view specify what is the content for each section.\n\n## Installation\n\n```sh\n$ npm install express-handlebars-sections\n```\n\n## Usage\n#### 1- Configure the express handlebars.\nIf you register the Handlebars view engine directly use this:\n\n```javascript\nvar express = require('express');\nvar express_handlebars  = require('express-handlebars');\nvar express_handlebars_sections = require('express-handlebars-sections');\n\nvar app = express();\n\napp.engine('handlebars', express_handlebars({\n\tsection: express_handlebars_sections()  // CONFIGURE 'express_handlebars_sections'\n\n\t// properties used by express-handlebars configuration ...\n}));\n```\nor if you prefer register Handlebars view engine with a Handlebars instance use this:\n```javascript\nvar express = require('express');\nvar express_handlebars  = require('express-handlebars');\nvar express_handlebars_sections = require('express-handlebars-sections');\n\nvar app = express();\n\nvar hbs = express_handlebars.create({\n\t// properties used by express-handlebars configuration ...\n});\nexpress_handlebars_sections(hbs);   // CONFIGURE 'express_handlebars_sections'\n\napp.engine('handlebars', handlebars.engine);\n```\n\n#### 2- Define your sections in the layout\nHere we going to define two sections, one for the header and other for the footer of my page.\n```html\n<head>\n    <title>Hello express-handlebars-sections</title>\n</head>\n<body>\n    <!-- DEFINE A 'header' SECTION -->\n    {{{_sections.header}}}\n\n    {{{body}}\n\n    <!-- DEFINE A 'footer' SECTION -->\n    {{{_sections.footer}}}\n</body>\n</html>\n```\n\n#### 3- Define the content for your sections in the view\nThen in a view that will use the previous layout we can define what is the content that we want to render of each section.\n\n```html\n<p>This is my Body Content</p>\n\n{{#section 'header'}}\n    <h1>This is my Header Content</h1>\n{{/section}}\n\n{{#section 'footer'}}\n    <h1>This is my Footer Content</h1>\n{{/section}}\n```\n\nThis will result the following code:\n```html\n<head>\n    <title>Hello express-handlebars-sections</title>\n</head>\n<body>\n    <h1>This is my Header Content</h1>\n    <p>This is my Body Content</p>\n    <h1>This is my Footer Content</h1>\n</body>\n</html>\n```\n\n#### Note\nIt's not necessary define the content for a section. If no content is specified it does nothing.\n\n## Use Cases\n\n### Define a default content for the section\nWe can define a default content for the section in the layout. In this case if the view dosen't define a content for the section, its default content will be rendered.\n```html\n<head>\n    <title>Hello express-handlebars-sections</title>\n</head>\n<body>\n\n<!-- DEFINE THE DEFAULT CONTENT FOR THE 'header' SECTION -->\n{{#section 'header'}}\n    <p>Default Header</p>\n{{/section}}\n\n{{{_sections.header}}}\n\n...\n```\n\nIn this case if any content for the 'header' section is defined in the view, it will be render the default content. \n**Is necessary define the default content before define the section.**\nfor example the following code is incorrect\n```html\n{{{_sections.header}}}\n\n<!-- DEFINE THE DEFAULT CONTENT FOR THE 'header' SECTION -->\n{{#section 'header'}}\n    <p>Default Header</p>\n{{/section}}\n```\n\n### Require content for the section\nYou can force to require a content for a section, throwing an Error if no content is defined.\n```html\n<head>\n    <title>Hello express-handlebars-sections</title>\n</head>\n<body>\n\n<!-- DEFINE A REQUIRED 'header' SECTION -->\n{{{_sections._get 'header'}}}\n```\n\nIn this case if no content is defined for the 'header' section (either in view or layout) it will trhow the Error **\"The section 'header' is required.\"**.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cyberxander90/express-handlebars-sections.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.1"
}
